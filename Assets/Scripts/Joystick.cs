//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Scripts/Joystick.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Joystick : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Joystick()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Joystick"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""4d39d086-60db-4fa7-9844-454a1679a34e"",
            ""actions"": [
                {
                    ""name"": ""TankMove"",
                    ""type"": ""Value"",
                    ""id"": ""b3eb21a3-a9f4-4eb8-8885-1288655eac3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BarrelUp"",
                    ""type"": ""Button"",
                    ""id"": ""be6baf15-0888-4ae9-a23b-4b8a1360a972"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BarrelDown"",
                    ""type"": ""Button"",
                    ""id"": ""25f27125-802b-41d6-88e2-a3cc9f591c33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurretLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a6cbca63-dd41-4a63-99da-72f4922eebf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurretRight"",
                    ""type"": ""Button"",
                    ""id"": ""55555f33-1e54-4f43-bb70-c744b2df2d62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b997e3ec-bec3-406c-b5d5-7046af193fd7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48323efa-fb4b-42c0-81ea-4fa26593a2d1"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BarrelUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8beea760-14c6-4624-8a55-1d174921d320"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BarrelDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""948d6367-5da1-423e-9180-6cd3e359ad58"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurretLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb25882c-bd3e-47c8-9825-deb6bd80f1a1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurretRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Buttons"",
            ""id"": ""1e645dab-187f-462a-a887-7c627a588d57"",
            ""actions"": [
                {
                    ""name"": ""Camera"",
                    ""type"": ""Button"",
                    ""id"": ""f710d5c9-0220-4430-bcbe-7e6a3ca278d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""198921b4-325c-41b9-9525-2dbf390e0a32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""e142ea98-9fbe-4f58-b8e2-de967caaac34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Power"",
                    ""type"": ""Button"",
                    ""id"": ""36ebd4c0-871e-4f27-abb2-521f1b8c5576"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item1"",
                    ""type"": ""Button"",
                    ""id"": ""2437db4e-96f4-42d9-b0d9-546b90de844a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item2"",
                    ""type"": ""Button"",
                    ""id"": ""2e91f13b-7607-4174-9f7b-9fa0d649f511"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""b2591d02-91cd-4f0e-bdcc-eec0d18d8997"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7fb3c5b-dc4f-47da-9c1d-1ef7ecc8b7c7"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44c472fc-18e5-492e-aa3a-5819bc2ef33f"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee4f43c0-64dc-4e2b-9e99-703a7509763e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b023e28-1161-4ef1-a2b6-df699e980c67"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98ad1d4a-6850-4c54-89ee-5b6958c1a331"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Item1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db05307d-cc6d-4928-8962-2e801cdde708"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Item2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e56f2bf-60d6-4dba-a314-f61371019ef8"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_TankMove = m_Movement.FindAction("TankMove", throwIfNotFound: true);
        m_Movement_BarrelUp = m_Movement.FindAction("BarrelUp", throwIfNotFound: true);
        m_Movement_BarrelDown = m_Movement.FindAction("BarrelDown", throwIfNotFound: true);
        m_Movement_TurretLeft = m_Movement.FindAction("TurretLeft", throwIfNotFound: true);
        m_Movement_TurretRight = m_Movement.FindAction("TurretRight", throwIfNotFound: true);
        // Buttons
        m_Buttons = asset.FindActionMap("Buttons", throwIfNotFound: true);
        m_Buttons_Camera = m_Buttons.FindAction("Camera", throwIfNotFound: true);
        m_Buttons_Reset = m_Buttons.FindAction("Reset", throwIfNotFound: true);
        m_Buttons_Skip = m_Buttons.FindAction("Skip", throwIfNotFound: true);
        m_Buttons_Power = m_Buttons.FindAction("Power", throwIfNotFound: true);
        m_Buttons_Item1 = m_Buttons.FindAction("Item1", throwIfNotFound: true);
        m_Buttons_Item2 = m_Buttons.FindAction("Item2", throwIfNotFound: true);
        m_Buttons_Move = m_Buttons.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_TankMove;
    private readonly InputAction m_Movement_BarrelUp;
    private readonly InputAction m_Movement_BarrelDown;
    private readonly InputAction m_Movement_TurretLeft;
    private readonly InputAction m_Movement_TurretRight;
    public struct MovementActions
    {
        private @Joystick m_Wrapper;
        public MovementActions(@Joystick wrapper) { m_Wrapper = wrapper; }
        public InputAction @TankMove => m_Wrapper.m_Movement_TankMove;
        public InputAction @BarrelUp => m_Wrapper.m_Movement_BarrelUp;
        public InputAction @BarrelDown => m_Wrapper.m_Movement_BarrelDown;
        public InputAction @TurretLeft => m_Wrapper.m_Movement_TurretLeft;
        public InputAction @TurretRight => m_Wrapper.m_Movement_TurretRight;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @TankMove.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTankMove;
                @TankMove.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTankMove;
                @TankMove.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTankMove;
                @BarrelUp.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnBarrelUp;
                @BarrelUp.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnBarrelUp;
                @BarrelUp.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnBarrelUp;
                @BarrelDown.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnBarrelDown;
                @BarrelDown.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnBarrelDown;
                @BarrelDown.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnBarrelDown;
                @TurretLeft.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTurretLeft;
                @TurretLeft.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTurretLeft;
                @TurretLeft.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTurretLeft;
                @TurretRight.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTurretRight;
                @TurretRight.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTurretRight;
                @TurretRight.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTurretRight;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TankMove.started += instance.OnTankMove;
                @TankMove.performed += instance.OnTankMove;
                @TankMove.canceled += instance.OnTankMove;
                @BarrelUp.started += instance.OnBarrelUp;
                @BarrelUp.performed += instance.OnBarrelUp;
                @BarrelUp.canceled += instance.OnBarrelUp;
                @BarrelDown.started += instance.OnBarrelDown;
                @BarrelDown.performed += instance.OnBarrelDown;
                @BarrelDown.canceled += instance.OnBarrelDown;
                @TurretLeft.started += instance.OnTurretLeft;
                @TurretLeft.performed += instance.OnTurretLeft;
                @TurretLeft.canceled += instance.OnTurretLeft;
                @TurretRight.started += instance.OnTurretRight;
                @TurretRight.performed += instance.OnTurretRight;
                @TurretRight.canceled += instance.OnTurretRight;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Buttons
    private readonly InputActionMap m_Buttons;
    private IButtonsActions m_ButtonsActionsCallbackInterface;
    private readonly InputAction m_Buttons_Camera;
    private readonly InputAction m_Buttons_Reset;
    private readonly InputAction m_Buttons_Skip;
    private readonly InputAction m_Buttons_Power;
    private readonly InputAction m_Buttons_Item1;
    private readonly InputAction m_Buttons_Item2;
    private readonly InputAction m_Buttons_Move;
    public struct ButtonsActions
    {
        private @Joystick m_Wrapper;
        public ButtonsActions(@Joystick wrapper) { m_Wrapper = wrapper; }
        public InputAction @Camera => m_Wrapper.m_Buttons_Camera;
        public InputAction @Reset => m_Wrapper.m_Buttons_Reset;
        public InputAction @Skip => m_Wrapper.m_Buttons_Skip;
        public InputAction @Power => m_Wrapper.m_Buttons_Power;
        public InputAction @Item1 => m_Wrapper.m_Buttons_Item1;
        public InputAction @Item2 => m_Wrapper.m_Buttons_Item2;
        public InputAction @Move => m_Wrapper.m_Buttons_Move;
        public InputActionMap Get() { return m_Wrapper.m_Buttons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonsActions set) { return set.Get(); }
        public void SetCallbacks(IButtonsActions instance)
        {
            if (m_Wrapper.m_ButtonsActionsCallbackInterface != null)
            {
                @Camera.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnCamera;
                @Reset.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnReset;
                @Skip.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnSkip;
                @Power.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnPower;
                @Power.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnPower;
                @Power.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnPower;
                @Item1.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnItem1;
                @Item1.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnItem1;
                @Item1.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnItem1;
                @Item2.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnItem2;
                @Item2.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnItem2;
                @Item2.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnItem2;
                @Move.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_ButtonsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
                @Power.started += instance.OnPower;
                @Power.performed += instance.OnPower;
                @Power.canceled += instance.OnPower;
                @Item1.started += instance.OnItem1;
                @Item1.performed += instance.OnItem1;
                @Item1.canceled += instance.OnItem1;
                @Item2.started += instance.OnItem2;
                @Item2.performed += instance.OnItem2;
                @Item2.canceled += instance.OnItem2;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public ButtonsActions @Buttons => new ButtonsActions(this);
    public interface IMovementActions
    {
        void OnTankMove(InputAction.CallbackContext context);
        void OnBarrelUp(InputAction.CallbackContext context);
        void OnBarrelDown(InputAction.CallbackContext context);
        void OnTurretLeft(InputAction.CallbackContext context);
        void OnTurretRight(InputAction.CallbackContext context);
    }
    public interface IButtonsActions
    {
        void OnCamera(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
        void OnPower(InputAction.CallbackContext context);
        void OnItem1(InputAction.CallbackContext context);
        void OnItem2(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
